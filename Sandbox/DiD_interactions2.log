
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   14.2   Copyright 1985-2015 StataCorp LP
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     MP - Parallel Edition            College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

25-user 4-core Stata network perpetual license:
       Serial number:  501406210780
         Licensed to:  NUIT ART - Research Computing
                       Anton Verlygo (anton@northwestern.edu)

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  More than 2 billion observations are allowed; see help obs_advice.
      4.  Maximum number of variables is set to 5000; see help set_maxvar.

. do /projects/b1048/gillanes/Mergers/Codes/Mergers/Sandbox/DiD_interactions2.d
> o ../../../All/m_AA12345_3/intermediate ../output/ month 2015 1 2014 4 

. 
. clear all

. 
. set more off

. 
. est clear

. 
. /* *args coming from the python script*/
. /* *args: input_path       = `1' */
. /* *args: output_path      = `2' */
. /* *args: month_or_quarter = `3' */
. /* *args: year_completed   = `4' */
. /* *args: month_completed  = `5' */
. /* *args: year_announced   = `6' */
. /* *args: month_announced  = `7' */
. 
. 
. cd `1'
/projects/b1048/gillanes/Mergers/All/m_AA12345_3/intermediate

. log using `2'/did_stata_int_`3', text replace
-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /projects/b1048/gillanes/Mergers/All/m_AA12345_3/intermediate/../o
> utput//did_stata_int_month.log
  log type:  text
 opened on:  24 Jan 2021, 04:07:07

. 
. import delimited "stata_did_int_`3'.csv", encoding(ISO-8859-1)
(24 vars, 715,665 obs)

. 
. /*Install Packages*/
. ssc install outreg2
checking outreg2 consistency and verifying not already installed...
all files already exist and are up to date.

. ssc install ftools
checking ftools consistency and verifying not already installed...
all files already exist and are up to date.

. ssc install reghdfe
checking reghdfe consistency and verifying not already installed...
all files already exist and are up to date.

. ssc install estout
checking estout consistency and verifying not already installed...
all files already exist and are up to date.

. 
. /* Fixed Effects */
. egen entity_effects = group(upc dma_code)

. egen time_effects = group(year `3')

. egen time_calendar = group(`3')

. 
. /* WEIGHTING SCHEMES */
. gen pre_vol = volume * (1 - post_merger)

. gen weights_0 = 1 /*to add weights that won't change things*/

. egen weights_1 = total(pre_vol), by(upc)

. egen weights_2 = total(pre_vol), by(dma_code)

. egen weights_3 = total(pre_vol), by(upc dma_code)

. replace weights_1 = round(weights_1)
(685,239 real changes made)

. replace weights_2 = round(weights_2)
(715,665 real changes made)

. replace weights_3 = round(weights_3)
(681,885 real changes made)

. 
. /*Post Merger Non Merging*/
. gen Merging = .
(715,665 missing values generated)

. replace Merging = 1 if merging == "True"
(109,725 real changes made)

. replace Merging = 0 if merging == "False"
(605,940 real changes made)

. gen Non_Merging = (1 - Merging)

. gen Post_Non_Merging = post_merger * (1 - Merging)

. 
. /*Controls*/
. replace demand_instruments0 = demand_instruments0/distance
(715,665 real changes made, 591 to missing)

. 
. /*Quantity*/
. gen lquant = log(volume)

. 
. rename post_merger_merging Post_Merging

. 
. /*One Year Post*/
. gen month_date = ym(year, month)

. tabstat month_date if (month==`5' & year==`4'), save

    variable |      mean
-------------+----------
  month_date |       660
------------------------

. matrix cutoff_c=r(StatTotal)

. local cutoff_c=cutoff_c[1,1]

. gen after = 0

. replace after = 1 if month_date >= `cutoff_c' + 12
(159,240 real changes made)

. gen Post_Merger_1y = post_merger * after

. gen Post_Merging_1y = Post_Merging * after

. gen Post_Non_Merging_1y = Post_Non_Merging * after

. 
. /*Announced vs Completed*/
. tabstat month_date if (month==`7' & year==`6'), save

    variable |      mean
-------------+----------
  month_date |       651
------------------------

. matrix cutoff_a=r(StatTotal)

. local cutoff_a=cutoff_a[1,1]

. gen between = 0

. replace between = 1 if (month_date >= `cutoff_a' & month_date <= `cutoff_c')
(123,965 real changes made)

. gen Merging_btw = Merging * between

. gen Non_Merging_btw = Non_Merging * between

. 
. /*Untreated*/
. bys dma_code: gen mp_shares = sum(shares) if Merging==1
(605,940 missing values generated)

. bys dma_code: egen mp_share = max(mp_share)

. drop mp_shares

. foreach x in 2 5 10 {
  2. gen Untreated_`x' = 1
  3. replace Untreated_`x' = 0 if mp_share >= `x'/100
  4. gen Post_Merging_Treat_`x' = (1 - Untreated_`x') * Merging * post_merger
  5. gen Post_Non_Merging_Treat_`x' = (1 - Untreated_`x') * Non_Merging * post_
> merger
  6. }
(715,665 real changes made)
(715,665 real changes made)
(715,665 real changes made)

. 
. /*Minor post*/
. gen Major = .
(715,665 missing values generated)

. replace Major = 1 if major_competitor == "True"
(160,704 real changes made)

. replace Major = 0 if major_competitor == "False"
(554,961 real changes made)

. gen Post_Minor = (1 - Major) * Non_Merging * post_merger

. gen Post_Major = Major * Non_Merging * post_merger

. 
. /*Coarse HHI Bins*/
. gen HHI_bins = 0

. replace HHI_bins = 1 if (post_hhi*10000>1500 & post_hhi*10000<2500)
(0 real changes made)

. replace HHI_bins = 2 if (post_hhi*10000>2500 & !missing(post_hhi))
(715,665 real changes made)

. 
. /*Coarse DHHI Bins*/
. gen DHHI_bins = 0

. replace DHHI_bins = 1 if (dhhi*10000>100 & dhhi*10000<200)
(0 real changes made)

. replace DHHI_bins = 2 if (dhhi*10000>200 & !missing(dhhi))
(0 real changes made)

. 
. /*Finer HHI Bins*/
. gen HHI_binsf = 0

. replace HHI_binsf = 1 if (post_hhi*10000>=375 & post_hhi*10000<750)
(0 real changes made)

. replace HHI_binsf = 2 if (post_hhi*10000>=750 & post_hhi*10000<1125)
(0 real changes made)

. replace HHI_binsf = 3 if (post_hhi*10000>=1125 & post_hhi*10000<1500)
(0 real changes made)

. replace HHI_binsf = 4 if (post_hhi*10000>=1500 & post_hhi*10000<1750)
(0 real changes made)

. replace HHI_binsf = 5 if (post_hhi*10000>=1750 & post_hhi*10000<2000)
(0 real changes made)

. replace HHI_binsf = 6 if (post_hhi*10000>=2000 & post_hhi*10000<2250)
(0 real changes made)

. replace HHI_binsf = 7 if (post_hhi*10000>=2250 & post_hhi*10000<2500)
(0 real changes made)

. replace HHI_binsf = 8 if (post_hhi*10000>=2500 & !missing(post_hhi))
(715,665 real changes made)

. 
. /*Finer DHHI Bins*/
. gen DHHI_binsf = 0

. replace DHHI_binsf = 1 if (dhhi*10000>=25 & dhhi*10000<50)
(145,183 real changes made)

. replace DHHI_binsf = 2 if (dhhi*10000>=50 & dhhi*10000<75)
(57,131 real changes made)

. replace DHHI_binsf = 3 if (dhhi*10000>=75 & dhhi*10000<100)
(10,632 real changes made)

. replace DHHI_binsf = 4 if (dhhi*10000>=100 & dhhi*10000<125)
(0 real changes made)

. replace DHHI_binsf = 5 if (dhhi*10000>=125 & dhhi*10000<150)
(0 real changes made)

. replace DHHI_binsf = 6 if (dhhi*10000>=150 & dhhi*10000<175)
(0 real changes made)

. replace DHHI_binsf = 7 if (dhhi*10000>175 & dhhi*10000<200)
(0 real changes made)

. replace DHHI_binsf = 8 if (dhhi*10000>=200 & !missing(dhhi))
(0 real changes made)

. 
. /*HHI and DHHI Bins*/
. gen DHHI_HHI = 0

. replace DHHI_HHI = 1 if (dhhi*10000>=25 & post_hhi*10000>=375)
(212,946 real changes made)

. replace DHHI_HHI = 2 if (dhhi*10000>=50 & post_hhi*10000>=750)
(67,763 real changes made)

. replace DHHI_HHI = 3 if (dhhi*10000>=75 & post_hhi*10000>=1125)
(10,632 real changes made)

. replace DHHI_HHI = 4 if (dhhi*10000>=100 & post_hhi*10000>=1500)
(0 real changes made)

. replace DHHI_HHI = 5 if (dhhi*10000>=125 & post_hhi*10000>=1750)
(0 real changes made)

. replace DHHI_HHI = 6 if (dhhi*10000>=150 & post_hhi*10000>=2000)
(0 real changes made)

. replace DHHI_HHI = 7 if (dhhi*10000>=175 & post_hhi*10000>=2250)
(0 real changes made)

. replace DHHI_HHI = 8 if (dhhi*10000>=200 & !missing(dhhi) & post_hhi*10000>=2
> 500 & !missing(post_hhi))
(0 real changes made)

. 
. /*Nocke & Whinston Bins*/
. gen DHHI_HHI_NW = 0

. replace DHHI_HHI_NW = 1 if (dhhi*10000>=100 & post_hhi*10000>=1500)
(0 real changes made)

. replace DHHI_HHI_NW = 2 if (dhhi*10000>=200 & !missing(dhhi) & post_hhi*10000
> >2500 & !missing(post_hhi))
(0 real changes made)

. 
. /*Months After and Pre Dummies*/
. gen Months_post = 0

. forv i=1/24{
  2.         replace Months_post = `i' if month_date >= `cutoff_c' + `i'
  3. }
(294,507 real changes made)
(282,545 real changes made)
(270,332 real changes made)
(258,029 real changes made)
(245,431 real changes made)
(232,926 real changes made)
(220,529 real changes made)
(207,912 real changes made)
(195,546 real changes made)
(183,175 real changes made)
(171,157 real changes made)
(159,240 real changes made)
(147,349 real changes made)
(135,446 real changes made)
(123,140 real changes made)
(110,473 real changes made)
(97,969 real changes made)
(85,439 real changes made)
(72,697 real changes made)
(60,214 real changes made)
(47,879 real changes made)
(35,568 real changes made)
(23,551 real changes made)
(11,513 real changes made)

. 
. gen Months_pre = 0

. forv i=1/24{
  2.         replace Months_pre = `i' if month_date <= `cutoff_c' - `i'
  3. }
(409,194 real changes made)
(397,375 real changes made)
(385,214 real changes made)
(373,007 real changes made)
(360,713 real changes made)
(347,960 real changes made)
(335,343 real changes made)
(322,747 real changes made)
(309,935 real changes made)
(297,193 real changes made)
(284,354 real changes made)
(271,879 real changes made)
(259,455 real changes made)
(246,994 real changes made)
(234,233 real changes made)
(221,515 real changes made)
(209,148 real changes made)
(196,815 real changes made)
(184,734 real changes made)
(172,407 real changes made)
(160,230 real changes made)
(148,129 real changes made)
(136,019 real changes made)
(124,118 real changes made)

. 
. 
. 
. /*Main Routine*/
. foreach var of varlist lprice lquant {
  2. forval x = 0/3 {
  3. quietly{
  4. /*Overall Price Effects*/
. 
. /*Overall Effects*/
. reghdfe `var' Merging Post_Merging Post_Non_Merging trend [aw = weights_`x'],
>  abs(entity_effects) vce(cluster dma_code)
  5. est sto OA_`x'_`var'
  6. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Overall") replace
  7. 
. reghdfe `var' Merging Post_Merging Post_Non_Merging trend [aw = weights_`x'],
>  abs(entity_effects time_calendar) vce(cluster dma_code)
  8. est sto OA_FE_`x'_`var'
  9. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Overall FE") append
 10. 
. reghdfe `var' Merging Post_Merging Post_Non_Merging trend [aw = weights_`x'],
>  abs(dma_code##c.trend entity_effects time_calendar) vce(cluster dma_code)
 11. est sto OA_FE_t_`x'_`var'
 12. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Overall t") append
 13. 
. /*Overall Effects Controls*/
. reghdfe `var' Merging Post_Merging Post_Non_Merging log_hhinc_per_person_adj 
> demand* trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 14. est sto OA_C_`x'_`var'
 15. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Overall C") append
 16. 
. reghdfe `var' Merging Post_Merging Post_Non_Merging log_hhinc_per_person_adj 
> demand* trend [aw = weights_`x'], abs(entity_effects time_calendar) vce(clust
> er dma_code)
 17. est sto OA_FE_C_`x'_`var'
 18. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Overall FE C") append
 19. 
. reghdfe `var' Merging Post_Merging Post_Non_Merging log_hhinc_per_person_adj 
> demand* trend [aw = weights_`x'], abs(dma_code##c.trend entity_effects time_c
> alendar) vce(cluster dma_code)
 20. est sto OA_FE_C_t_`x'_`var'
 21. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Overall t C") append
 22. 
. foreach z in 2 5 10 {
 23. /*Overall Effects Untreated*/
. reghdfe `var' Untreated_`z' Merging Post_Merging_Treat_`z' Post_Non_Merging_T
> reat_`z' trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 24. est sto UT_`x'_`var'_`z'
 25. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Untreated `z'") append
 26. 
. reghdfe `var' Untreated_`z' Merging Post_Merging_Treat_`z' Post_Non_Merging_T
> reat_`z' trend [aw = weights_`x'], abs(entity_effects time_calendar) vce(clus
> ter dma_code)
 27. est sto UT_FE_`x'_`var'_`z'
 28. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Untreated FE `z'") append
 29. 
. reghdfe `var' Untreated_`z' Merging Post_Merging_Treat_`z' Post_Non_Merging_T
> reat_`z' trend [aw = weights_`x'], abs(dma_code##c.trend entity_effects time_
> calendar) vce(cluster dma_code)
 30. est sto UT_T_`x'_`var'_`z'
 31. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Untreated T `z'") append
 32. 
. /*Overall Effects Untreated Controls*/
. reghdfe `var' Untreated_`z' Merging Post_Merging_Treat_`z' Post_Non_Merging_T
> reat_`z' log_hhinc_per_person_adj demand* trend [aw = weights_`x'], abs(entit
> y_effects) vce(cluster dma_code)
 33. est sto UT_C_`x'_`var'_`z'
 34. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Untreated C `z'") append
 35. 
. reghdfe `var' Untreated_`z' Merging Post_Merging_Treat_`z' Post_Non_Merging_T
> reat_`z' log_hhinc_per_person_adj demand* trend [aw = weights_`x'], abs(entit
> y_effects time_calendar) vce(cluster dma_code)
 36. est sto UT_FE_C_`x'_`var'_`z'
 37. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Untreated FE C `z'") append
 38. 
. reghdfe `var' Untreated_`z' Merging Post_Merging_Treat_`z' Post_Non_Merging_T
> reat_`z' log_hhinc_per_person_adj demand* trend [aw = weights_`x'], abs(dma_c
> ode##c.trend entity_effects time_calendar) vce(cluster dma_code)
 39. est sto UT_T_C_`x'_`var'_`z'
 40. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Untreated T C `z'") append
 41. }
 42. *
. 
. /*Overall Effects Major*/
. reghdfe `var' Major Merging Post_Major Post_Merging Post_Minor trend [aw = we
> ights_`x'], abs(entity_effects) vce(cluster dma_code)
 43. est sto Maj_`x'_`var'
 44. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : MAjor") append
 45. 
. reghdfe `var' Major Merging Post_Major Post_Merging Post_Minor trend [aw = we
> ights_`x'], abs(entity_effects time_calendar) vce(cluster dma_code)
 46. est sto Maj_FE_`x'_`var'
 47. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Major FE") append
 48. 
. reghdfe `var' Major Merging Post_Major Post_Merging Post_Minor trend [aw = we
> ights_`x'], abs(dma_code##c.trend entity_effects time_calendar) vce(cluster d
> ma_code)
 49. est sto Maj_FE_t_`x'_`var'
 50. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Major t") append
 51. 
. /*Overall Effects Major Controls*/
. reghdfe `var' Major Merging Post_Major Post_Merging Post_Minor log_hhinc_per_
> person_adj demand* trend [aw = weights_`x'], abs(entity_effects) vce(cluster 
> dma_code)
 52. est sto Maj_C_`x'_`var'
 53. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : MAjor C") append
 54. 
. reghdfe `var' Major Merging Post_Major Post_Merging Post_Minor log_hhinc_per_
> person_adj demand* trend [aw = weights_`x'], abs(entity_effects time_calendar
> ) vce(cluster dma_code)
 55. est sto Maj_FE_C_`x'_`var'
 56. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Major FE C") append
 57. 
. reghdfe `var' Major Merging Post_Major Post_Merging Post_Minor log_hhinc_per_
> person_adj demand* trend [aw = weights_`x'], abs(dma_code##c.trend entity_eff
> ects time_calendar) vce(cluster dma_code)
 58. est sto Maj_FE_t_C_`x'_`var'
 59. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Major t C") append
 60. 
. /*Timing of the Effects on Prices*/
. /*One Year After*/
. reghdfe `var' Merging Post_Merging Post_Non_Merging Post_Non_Merging_1y Post_
> Merging_1y trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code
> )
 61. est sto After_`x'_`var'
 62. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : 1y") append
 63. 
. reghdfe `var' Merging Post_Merging Post_Non_Merging Post_Non_Merging_1y Post_
> Merging_1y trend [aw = weights_`x'], abs(entity_effects time_calendar) vce(cl
> uster dma_code)
 64. est sto After_FE_`x'_`var'
 65. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : 1y FE") append
 66. 
. /*Granular Timing for Post Only*/
. reghdfe `var' Merging Post_Merging#i.Months_post Post_Non_Merging#i.Months_po
> st i.Months_post trend [aw = weights_`x'], abs(entity_effects) vce(cluster dm
> a_code)
 67. est sto Tim_`x'_`var'
 68. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Timing") append
 69. 
. reghdfe `var' Merging Post_Merging#i.Months_post Post_Non_Merging#i.Months_po
> st i.Months_post trend [aw = weights_`x'], abs(entity_effects time_calendar) 
> vce(cluster dma_code)
 70. est sto Tim_FE_`x'_`var'
 71. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Timing FE") append
 72. 
. /*Granular Timing Pre and Post*/
. reghdfe `var' Merging Merging#i.Months_pre Non_Merging#i.Months_pre Post_Merg
> ing#i.Months_post Post_Non_Merging#i.Months_post i.Months_pre i.Months_post t
> rend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 73. est sto Timing_`x'_`var'
 74. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Timing Pre Post") append
 75. 
. reghdfe `var' Merging Merging#i.Months_pre Non_Merging#i.Months_pre Post_Merg
> ing#i.Months_post Post_Non_Merging#i.Months_post i.Months_pre i.Months_post t
> rend [aw = weights_`x'], abs(entity_effects time_calendar) vce(cluster dma_co
> de)
 76. est sto Timing_FE_`x'_`var'
 77. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Timing Pre Post FE") append
 78. 
. /*Between Period*/
. reghdfe `var' Merging Merging_btw Non_Merging_btw Post_Merging Post_Non_Mergi
> ng trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 79. est sto Btw_`x'_`var'
 80. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Between") append
 81. 
. reghdfe `var' Merging Merging_btw Non_Merging_btw Post_Merging Post_Non_Mergi
> ng trend [aw = weights_`x'], abs(entity_effects time_calendar) vce(cluster dm
> a_code)
 82. est sto Btw_FE_`x'_`var'
 83. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : Between FE") append
 84. 
. /*Interactions of Concentration Measures on Prices*/
. 
. /* HHI Coarse */
. reghdfe `var' Post_Merging#i.HHI_bins Post_Non_Merging#i.HHI_bins i.HHI_bins 
> trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 85. est sto HHI_`x'_`var'
 86. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : HHI") append
 87. 
. * DHHI Coarse
. reghdfe `var' Post_Merging#i.DHHI_bins Post_Non_Merging#i.DHHI_bins i.DHHI_bi
> ns trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 88. est sto DHHI_`x'_`var'
 89. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : DHHI") append
 90. 
. * HHI Fine
. reghdfe `var' Post_Merging#i.HHI_binsf Post_Non_Merging#i.HHI_binsf i.HHI_bin
> sf trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 91. est sto HHIf_`x'_`var'
 92. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : HHIf") append
 93. 
. * DHHI Fine
. reghdfe `var' Post_Merging#i.DHHI_binsf Post_Non_Merging#i.DHHI_binsf i.DHHI_
> binsf trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 94. est sto DHHIf_`x'_`var'
 95. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : DHHIf") append
 96. 
. * DHHI & HHI Bins
. reghdfe `var' Post_Merging#i.DHHI_HHI Post_Non_Merging#i.DHHI_HHI i.DHHI_HHI 
> trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
 97. est sto DHHI_HHI_`x'_`var'
 98. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : DHHI_HHI") append
 99. 
. * Nocke & Whinston Regions
. reghdfe `var' Post_Merging#i.DHHI_HHI_NW Post_Non_Merging#i.DHHI_HHI_NW i.DHH
> I_HHI_NW trend [aw = weights_`x'], abs(entity_effects) vce(cluster dma_code)
100. est sto DHHI_HHI_NW_`x'_`var'
101. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : NW") append
102. 
. /*Classic Diff in Diffs*/
. /*Price Effects*/
. reghdfe `var' Post_Merging post_merger trend [aw = weights_`x'], abs(entity_e
> ffects) vce(cluster dma_code)
103. est sto Did_`x'_`var'
104. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : did") append
105. 
. reghdfe `var' Post_Merging post_merger trend [aw = weights_`x'], abs(entity_e
> ffects time_calendar) vce(cluster dma_code)
106. est sto Did_calendar_`x'_`var'
107. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : did calendar") append
108. 
. reghdfe `var' Post_Merging post_merger trend [aw = weights_`x'], abs(entity_e
> ffects time_effects) vce(cluster dma_code)
109. est sto Did_period_`x'_`var'
110. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : did period") append
111. 
. reghdfe `var' Post_Merging post_merger trend [aw = weights_`x'], abs(dma_code
> ##c.trend entity_effects time_calendar) vce(cluster dma_code)
112. est sto Did_t_`x'_`var'
113. outreg2 using `2'/did_int_`var'_`x'.txt, stats(coef se pval) ctitle("`var'
> : did trends") append
114. 
. est clear
115. }
116. }
117. }
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
 :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
. 
. est clear

. 
. 
. 
. 
. exit, STATA clear
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
. 
. est clear

. 
. 
. 
. 
. exit, STATA clear
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>  : Warning:  variance matrix is nonsymmetric or highly singular
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>  : Warning:  variance matrix is nonsymmetric or highly singular
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
 :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>  : Warning:  variance matrix is nonsymmetric or highly singular
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
 :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : Warning:  va
> riance matrix is nonsymmetric or highly singular
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : Warning:  va
> riance matrix is nonsymmetric or highly singular
 :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  : Warning:  variance matrix is nonsymmetric or hi
> ghly singular
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
 :  :  :  :  :  :  :  :  :  :  :  :  :  : 
. 
. est clear

. 
. 
. 
. 
. exit, STATA clear
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
. 
. est clear

. 
. 
. 
. 
. exit, STATA clear
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
 :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
 :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : Warning:  va
> riance matrix is nonsymmetric or highly singular
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : Warning:  va
> riance matrix is nonsymmetric or highly singular
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
 :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
> :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  : 
 :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
>   :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  
